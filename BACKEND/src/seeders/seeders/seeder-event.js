"use strict";
const { nanoid } = require("nanoid");
module.exports = {
  up: async (queryInterface, Sequelize) => {
    return queryInterface.bulkInsert("events", [
      {
        public_id: nanoid(),
        creator_id: 1,
        title: "Event 1",
        description: "Description for Event 1",
        location: "Location for Event 1",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() - INTERVAL 5 DAY"),
        end_time: Sequelize.literal("CURDATE() - INTERVAL 4 DAY - INTERVAL 15 HOUR"),
        created_at: Sequelize.literal("CURDATE() - INTERVAL 20 DAY"),
        updated_at: Sequelize.literal("CURDATE() - INTERVAL 20 DAY"),
      },
      {
        public_id: nanoid(),
        creator_id: 3,
        title: "Event 2",
        description: "Description for Event 2",
        location: "Location for Event 2",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() + INTERVAL 5 DAY"),
        end_time: Sequelize.literal("CURDATE() + INTERVAL 5 DAY + INTERVAL 5 HOUR"),
        created_at: Sequelize.literal("CURDATE() - INTERVAL 10 DAY"),
        updated_at: Sequelize.literal("CURDATE() - INTERVAL 10 DAY"),
      },
      {
        public_id: nanoid(),
        creator_id: 4,
        title: "Event 3",
        description: "Description for Event 3",
        location: "Location for Event 3",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() + INTERVAL 20 DAY"),
        end_time: Sequelize.literal("CURDATE() + INTERVAL 20 DAY + INTERVAL 5 HOUR"),
        created_at: Sequelize.literal("CURDATE()"),
        updated_at: Sequelize.literal("CURDATE()"),
      },
      {
        public_id: nanoid(),
        creator_id: 4,
        title: "Event 4",
        description: "Description for Event 4",
        location: "Location for Event 4",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() - INTERVAL 7 DAY"),
        end_time: Sequelize.literal("CURDATE() - INTERVAL 6 DAY - INTERVAL 20 HOUR"),
        created_at: Sequelize.literal("CURDATE() - INTERVAL 30 DAY"),
        updated_at: Sequelize.literal("CURDATE() - INTERVAL 30 DAY"),
      },
      {
        public_id: nanoid(),
        creator_id: 3,
        title: "Event 5",
        description: "Description for Event 5",
        location: "Location for Event 5",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() + INTERVAL 16 HOUR"),
        end_time: Sequelize.literal("CURDATE() + INTERVAL 21 HOUR"),
        created_at: Sequelize.literal("CURDATE() - INTERVAL 16 DAY"),
        updated_at: Sequelize.literal("CURDATE() - INTERVAL 16 DAY"),
      },
      {
        public_id: nanoid(),
        creator_id: 1,
        title: "Event 6",
        description: "Description for Event 6",
        location: "Location for Event 6",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() + INTERVAL 16 HOUR"),
        end_time: Sequelize.literal("CURDATE() + INTERVAL 21 HOUR"),
        created_at: Sequelize.literal("CURDATE() - INTERVAL 16 DAY"),
        updated_at: Sequelize.literal("CURDATE() - INTERVAL 16 DAY"),
      },
      {
        public_id: nanoid(),
        creator_id: 3,
        title: "Event 7",
        description: "Description for Event 7",
        location: "Location for Event 7",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() - INTERVAL 4 DAY"),
        end_time: Sequelize.literal("CURDATE() - INTERVAL 3 DAY - INTERVAL 18 HOUR"),
        created_at: Sequelize.literal("CURDATE() - INTERVAL 18 DAY"),
        updated_at: Sequelize.literal("CURDATE() - INTERVAL 18 DAY"),
      },
      {
        public_id: nanoid(),
        creator_id: 4,
        title: "Event 8",
        description: "Description for Event 8",
        location: "Location for Event 8",
        capacity: 100,
        start_time: Sequelize.literal("CURDATE() + INTERVAL 16 HOUR"),
        end_time: Sequelize.literal("CURDATE() + INTERVAL 21 HOUR"),
        created_at: Sequelize.literal("CURDATE()"),
        updated_at: Sequelize.literal("CURDATE()"),
      },
    ]);
  },

  down: async (queryInterface, Sequelize) => {
    return queryInterface.bulkDelete("events", null, {});
  },
};
